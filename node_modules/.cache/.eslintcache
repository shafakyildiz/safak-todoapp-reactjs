[{"C:\\Users\\safak\\Desktop\\todo-app-reactjs-safak\\src\\index.js":"1","C:\\Users\\safak\\Desktop\\todo-app-reactjs-safak\\src\\App.js":"2"},{"size":410,"mtime":1616279197593,"results":"3","hashOfConfig":"4"},{"size":2052,"mtime":1616281930753,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"nnpwq8",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\safak\\Desktop\\todo-app-reactjs-safak\\src\\index.js",[],["12","13"],"C:\\Users\\safak\\Desktop\\todo-app-reactjs-safak\\src\\App.js",["14"],"import React, {Component} from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state={\n      newItem:\"\",\n      list: []\n    }\n  }\n\n\n\nupdateInput(key, value){\n  // Update the react state\n  this.setState({\n    [key]:value  })\n}\n\naddItem(){\n  // Create item with an unique id.\n\n  const newItem = {\n    id: 1+ Math.random(),\n    value: this.state.newItem.slice()\n  };\n\n  // Copy the current list of items\n  const list = [...this.state.list];\n\n\n  // Add new item to the list\n\n  list.push(newItem);\n\n  // Update the state with new list and reset newItem input\n\n\n  this.setState({\n    list,\n    newItem:\"\"\n\n  });\n}\n\ndeleteItem(id){\n\n  const list = [...this.state.list];\n\n  const updatedList = list.filter(item => item.id !== id);\n\n  this.setState({list: updatedList});\n}\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <div>\n      <form  noValidate autoComplete=\"off\">\n\n        Safak's React Todo Application <br/><br/>\n        <TextField className=\"smt\" id=\"outlined-basic\" label=\"Add a todo\" variant=\"outlined\" placeholder=\"Type a todo here...\"\n        value={this.state.newItem}\n        onChange={e => this.updateInput(\"newItem\", e.target.value)}/>\n        </form>\n        <br/>\n        {/* <input type=\"text\"\n        placeholder=\"Type a todo here...\"\n        value={this.state.newItem}\n        onChange={e => this.updateInput(\"newItem\", e.target.value)}/> */}\n\n        <Button variant=\"contained\" color=\"primary\"\n        onClick={() => this.addItem()}>Add</Button>\n        <br/>\n        <ul>\n          {this.state.list.map(item => {\n            return(\n              <li key={item.id}>\n              {item.value} <Button variant=\"contained\" color=\"primary\" onClick={() => this.deleteItem(item.id)}>X</Button>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n  }\n}\n\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":5,"column":10,"nodeType":"21","messageId":"22","endLine":5,"endColumn":20},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]